AWSTemplateFormatVersion: "2010-09-09"
Description: Create environment for session manager

Parameters:
  VPCCidr:
    Type: String
    Default: 10.1.0.0/16

  PrivateSubnetCidr:
    Type: String
    Default: 10.1.0.0/26

  PublicSubnetCidr:
    Type: String
    Default: 10.1.0.64/26

  EndpointSubnetCidr:
    Type: String
    Default: 10.1.0.128/26

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Environment
          Value: sessionManager

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: sessionManager

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private
        - Key: Environment
          Value: sessionManager

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public
        - Key: Environment
          Value: sessionManager

  EndpointSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref EndpointSubnetCidr
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: endpoint
        - Key: Environment
          Value: sessionManager

  # Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private
        - Key: Environment
          Value: sessionManager

  PrivateRouteTableAccociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public
        - Key: Environment
          Value: sessionManager

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAccociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  EndpointRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: endpoint
        - Key: Environment
          Value: sessionManager

  EndpointRouteTableAccociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EndpointRouteTable
      SubnetId: !Ref EndpointSubnet

  # Security Group
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for Endpoint
      GroupName: SSMEndpoint
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: endpoint
        - Key: Environment
          Value: sessionManager

  EndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EndpointSecurityGroup.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt EndpointSecurityGroup.GroupId
      Description: From EC2 with Endpoint SecurityGroup

  EndpointSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt EndpointSecurityGroup.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt EndpointSecurityGroup.GroupId
      Description: To EC2 with Endpoint SecurityGroup

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for Private
      GroupName: SSMPrivate
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnetCidr
          Description: for private subnet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnetCidr
          Description: for private subnet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationPrefixListId: pl-61a54008
          Description: To S3 bucket through Endpoint
      Tags:
        - Key: Name
          Value: private
        - Key: Environment
          Value: sessionManager

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for Public
      GroupName: SSMPublic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref PublicSubnetCidr
          Description: for public subnet
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
          Description: Echo request from ANY
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !Ref PublicSubnetCidr
          Description: for public subnet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationPrefixListId: pl-61a54008
          Description: To S3 bucket through Endpoint
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow access to the Internet by HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow access to the Internet by HTTP
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
          Description: Echo request to ANY
      Tags:
        - Key: Name
          Value: public
        - Key: Environment
          Value: sessionManager

  # Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{
        "Version": "2012-10-17",
        "Statement":[{
          "Effect": "Allow",
          "Principal": "*",
          "Action": "*",
          "Resource": "*"
        }]
      }'
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref PublicRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC

  EC2Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !GetAtt EndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2
      SubnetIds: 
        - !Ref EndpointSubnet
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !GetAtt EndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds: 
        - !Ref EndpointSubnet
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !GetAtt EndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds: 
        - !Ref EndpointSubnet
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !GetAtt EndpointSecurityGroup.GroupId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds: 
        - !Ref EndpointSubnet
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  # IAM role
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  SSMEC2RoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2IAMRole

  SSMSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

Outputs:
  SSMVPCId:
    Value: !Ref VPC
    Export:
      Name: SSMVPCId

  SSMPrivateSubnetId:
    Value: !Ref PrivateSubnet
    Export:
      Name: SSMPrivateSubnetId

  SSMPublicSubnetId:
    Value: !Ref PublicSubnet
    Export:
      Name: SSMPublicSubnetId

  SSMEndpointSubnetId:
    Value: !Ref EndpointSubnet
    Export:
      Name: SSMEndpointSubnetId

  SSMPrivateSecurityGroupId:
    Value: !GetAtt PrivateSecurityGroup.GroupId
    Export:
      Name: SSMPrivateSecurityGroupId

  SSMPublicSecurityGroupId:
    Value: !GetAtt PublicSecurityGroup.GroupId
    Export:
      Name: SSMPublicSecurityGroupId

  SSMEndpointSecurityGroupId:
    Value: !GetAtt EndpointSecurityGroup.GroupId
    Export:
      Name: SSMEndpointSecurityGroupId

  SSMEC2RoleProfileArn:
    Value: !GetAtt SSMEC2RoleProfile.Arn
    Export:
      Name: SSMEC2RoleProfileArn

  SSMEC2RoleArn:
    Value: !GetAtt SSMEC2Role.Arn
    Export:
      Name: SSMEC2RoleArn

  SSMSpotFleetRoleArn:
    Value: !GetAtt SSMSpotFleetRole.Arn
    Export:
      Name: SSMSpotFleetRoleArn
